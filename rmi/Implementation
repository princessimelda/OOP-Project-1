package rmi;

import java.io.File;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.Timestamp;
import java.util.List;
import java.util.Map;
import serverside.DatabaseOperations;
import notificationsystem.Event;
import notificationsystem.Notification;
import notificationsystem.PublisherService;
import notificationsystem.ReminderPreferences;

public class StudentDbImplementation extends UnicastRemoteObject implements StudentDbInterface {
    private final DatabaseOperations operate = new DatabaseOperations();

    public StudentDbImplementation() throws RemoteException {
        super();
    }

    @Override
    public void createTableIfNotExists() throws RemoteException {
        operate.createTableIfNotExists();
    }
    
    @Override
    public void addLoginTrackingColumns() throws RemoteException {
        operate.addLoginTrackingColumns();
    }


    @Override
    public String registerStudent(String studentID, String studentFname, String studentSurname, String studentEmail, String password, String confirmPassword) throws RemoteException {
        return operate.registerStudent(studentID, studentFname, studentSurname, studentEmail, password, confirmPassword);
    }

    @Override
    public String loginStudent(String studentID, String password) throws RemoteException {
        return operate.loginStudent(studentID, password);
    }

    @Override
    public String[] getStudentNameById(String studentId) throws RemoteException {
        return operate.getStudentNameById(studentId);
    }

    @Override
    public String getProfilePicturePath(String studentId) throws RemoteException {
        return operate.getProfilePicturePath(studentId);
    }

    @Override
    public Map<Integer, List<String>> getTasksForMonth(int month, int year, String studentId) throws RemoteException {
        return operate.getTasksForMonth(month, year, studentId);
    }

    @Override
    public int insertTask(String studentId, String title, String description, Timestamp deadline, String status) throws RemoteException {
        return operate.insertTask(studentId, title, description, deadline, status);
    }

    @Override
    public boolean deleteTasks(String studentId, List<String> titles) throws RemoteException {
        return operate.deleteTasks(studentId, titles);
    }

    @Override
    public List<Map<String, Object>> getAllTasks(String studentId) throws RemoteException {
        return operate.getAllTasks(studentId);
    }

    @Override
    public Map<String, Object> getPriorityTask(String studentId) throws RemoteException {
        return operate.getPriorityTask(studentId);
    }

    @Override
    public boolean markTasksAsCompleted(String studentId, List<String> taskTitles) throws RemoteException {
        return operate.markTasksAsCompleted(studentId, taskTitles);
    }

    @Override
    public void updateTaskDay(String title, Timestamp newDeadline, String studentId) throws RemoteException {
        operate.updateTaskDay(title, newDeadline, studentId);
    }

    @Override
    public boolean updateEmail(String studentId, String newEmail) throws RemoteException {
        return operate.updateEmail(studentId, newEmail);
    }

    @Override
    public boolean updatePassword(String studentId, String newPassword) throws RemoteException {
        return operate.updatePassword(studentId, newPassword);
    }

    @Override
    public boolean updateReminderPreferences(String studentId, boolean enabled) throws RemoteException {
        return operate.updateReminderPreference(studentId, enabled);
    }

    @Override
    public void updateStudentDetails(String studentId, String newEmail, String newPassword, String profilePath, boolean remindersEnabled) throws RemoteException {
        operate.updateStudentDetails(studentId, newEmail, newPassword, profilePath, remindersEnabled);
    }

    @Override
    public boolean storeProfilePicture(String studentId, File file) throws RemoteException {
        return operate.storeProfilePicture(studentId, file);
    }

    @Override
    public boolean getReminderSetting(String studentId) throws RemoteException {
        return operate.getReminderSetting(studentId);
    }

    @Override
    public Map<String, Integer> getCompletedTaskCountsLast7Days(String studentId) throws RemoteException {
        return operate.getCompletedTaskCountsLast7Days(studentId);
    }

    @Override
    public void insertPublisher(PublisherService publisher) throws RemoteException {
        try {
            operate.insertPublisher(publisher);
        } catch (Exception e) {
            System.err.println("Failed to insert publisher: " + e.getMessage());
        }
    }

    @Override
    public void insertEvent(Event event) throws RemoteException {
        try {
            operate.insertEvent(event);
        } catch (Exception e) {
            System.err.println("Failed to insert event: " + e.getMessage());
        }
    }

    @Override
    public void insertNotification(Notification notification) throws RemoteException {
        try {
            operate.insertNotification(notification);
        } catch (Exception e) {
            System.err.println("Failed to insert notification: " + e.getMessage());
        }
    }

    @Override
    public void insertReminderPreferences(String studentId, String frequency, int hoursBeforeDeadline, boolean priorityOnly) throws RemoteException {
        try {
            operate.insertReminderPreferences(studentId, frequency, hoursBeforeDeadline, priorityOnly);
        } catch (Exception e) {
            System.err.println("Failed to insert reminder preferences: " + e.getMessage());
        }
    }

    @Override
    public void updateReminderPreferences(String studentId, String preferredTime, String frequencyHours, int hoursBeforePriority) throws RemoteException {
        operate.updateReminderPreferences(studentId, preferredTime, frequencyHours, hoursBeforePriority);
    }

    @Override
    public ReminderPreferences getReminderPreferences(String studentId) throws RemoteException {
        return operate.getReminderPreferences(studentId);
    }

    @Override
    public List<Map<String, String>> getStudentsWithUpcomingTasks() throws RemoteException {
        return operate.getStudentsWithUpcomingTasks();
    }

    @Override
    public void processReminders() throws RemoteException {
        operate.processReminders();
    }
}
